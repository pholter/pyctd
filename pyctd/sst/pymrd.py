import datetime
from pytz import timezone
import numpy
import logging
import sys
import argparse
import pkg_resources
import yaml
import pylab as pl
import os


standard_name_file = pkg_resources.resource_filename('pyctd', 'rules/standard_names.yaml')

# Get the version
version_file = pkg_resources.resource_filename('pyctd','VERSION')

with open(version_file) as version_f:
   version = version_f.read().strip()

# Setup logging module
logging.basicConfig(stream=sys.stderr, level=logging.INFO)
logger = logging.getLogger('pymrd')


class pymrd():
    """A object to read and process Sea & Sun Technology MRD files
    generated by the Microstructure profiler MSS.

    """ 
    def __init__(self,filename, only_metadata = False,verbosity =
                 logging.INFO, naming_rules = standard_name_file,baltic=None):
        logger.setLevel(verbosity)
        logger.info(' Opening file: ' + filename)
        self.filename = filename
        self.file_type = ''
        self.channels = []
        self.data = None
        self.date = None        
        self.lon = numpy.NaN
        self.lat = numpy.NaN

        # Plotting variables
        self.figures = []
        self.axes    = []        
        # Opening file for reading
        try:
            raw = f = open(self.filename,'rb')
        except Exception as e:
            logger.critical('Could not open file:' + self.filename + '( ' + str(e) + ' )')
            self.valid_cnv = False
            return
        #print('Hallo!',raw)
        # Find the header and store it
        #header = self._get_header(raw)
        #self._parse_header()



# Main function
def main():
    sum_help         = 'Gives a csv compatible summary'
    plot_help        = 'Plots the MRD file, list the parameters in a comma separated list, e.g. --plot CT00,pt00,oxy use the arguments "show" to immidiately show the figure (will halt the code until the figure is closed) and/or "save" to save the figure'
    plot_prefix_help = 'The prefix before the filename, standars is "./", this is usefule to define a path and/or a fie prefix, e.g. --plot_prefix figures/ctd_casts_of_important_cruise__'
    var_help         = 'Lists all the available variables within the file, separated between the orignal data within the file (data) and the computed data (cdata)'        
    sumhead_help     = 'Gives the header to the csv compatible summary'
    parser = argparse.ArgumentParser()
    parser.add_argument('--variables', '-va', action='store_true', help=var_help)    
    parser.add_argument('--summary', '-s', action='store_true', help=sum_help)
    parser.add_argument('--summary_header', '-sh', action='store_true', help=sumhead_help)
    #https://stackoverflow.com/questions/13346540/argparse-optional-argument-before-positional-argument    
    parser.add_argument('--plot', '-p', nargs='?', help=plot_help)
    parser.add_argument('--plot_prefix', '-pre', nargs='?', help=plot_prefix_help)    
    parser.add_argument('--verbose', '-v', action='count')
    #parser.add_argument('--version', action='store_true')
    parser.add_argument('--version', action='version', version='%(prog)s ' + version)
    parser.add_argument('filename')    
    args = parser.parse_args()
    
    if(args.verbose == None):
        loglevel = logging.WARNING        
    elif(args.verbose == 1):
        loglevel = logging.INFO        
    elif(args.verbose == 2):
        loglevel = logging.DEBUG        
    else:
        loglevel = logging.INFO


    logger.setLevel(loglevel)


    filename = args.filename

    print_summary = args.summary
    print_summary_header = args.summary_header
    
    if(filename != None):
        mrd = pymrd(filename,verbosity=loglevel)
    else:
        #logger.critical('Need a filename')
        print(parser.print_help())


    if(args.variables):
        summary = mrd.get_variables()
        print(summary)

    if(print_summary_header):
        summary = mrd.get_summary(header=True)
        print(summary)
    if(print_summary):
        summary = mrd.get_summary()
        print(summary)

    #
    # Plot the file
    #
    if(args.plot != None):
        FLAG_SHOW = False
        FLAG_SAVE = False
        variables_plot = []
        for var in args.plot.split(','):
            if(var.upper() == 'SHOW'):
                FLAG_SHOW = True
            elif( var.upper() == 'SAVE'):
                FLAG_SAVE = True
            else:
                variables_plot.append(var)

        if(args.plot_prefix == None):
            plot_prefix = "./"
        else:
            plot_prefix = args.plot_prefix

        mrd.plot(xaxis=variables_plot,show=FLAG_SHOW,save=FLAG_SAVE,fig_prefix=plot_prefix)

            
if __name__ == '__main__':
   main()        
        
